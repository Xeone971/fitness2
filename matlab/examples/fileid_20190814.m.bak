%fileid_20190814
%INRA\Olivier Vitrac - 19/08/2018, 21/08/2019

%% Load aliases from fileid
usr = alias;
usr.set({ 'local','current','fileid'},...
        {'/home/@username/Bulk/fitness2019/sandbox',...
         'fileid_20190814.ods',...
        '$local/$current'},'path');
fileid = usr.fileid; %fileid = '/home/olivi/Bulk/fitness2019/sandbox/fileid_20190814.ods';
def = alias; %alias('protectpath',false);
def.load(fileid)
simulation = false;
vsn = 0.21;
rev = '$2019/08/18$';

if ~exist(def.wwwroot,'dir'), mkdir(def.wwwroot); end 

%% search for all PPTX as defined by aliases set in fileid
PPTx = explore('*.pptx',def.sourcePPTfolder,'','abbreviate');
listauthors = {'Kata Galić' 'Fátima Poças' 'Patrick Sauvegrain' 'Maria José Fabra' 'Catherine Loriot' 'Frederic Debeaufort','Horst Christian Langowski'};
for i=1:length(PPTx);
    tmp = strsplit(PPTx(i).subpath,filesep); tmp = tmp(~cellfun(@isempty,tmp));
    PPTx(i).subpath_split = tmp;
    PPTx(i).depth = length(PPTx(i).subpath_split);
    PPTx(i).slides = extractTXTfromPPT(fullfile(PPTx(i).path,PPTx(i).file));
    PPTx(i).slidetitle = regexprep(PPTx(i).slides(2).content,{'\n','#+\s+','^Unit\s*\d+\.\d+\s*'},{' - ','',''});
    iauthor = find(~cellfun(@isempty,regexp(PPTx(i).slidetitle,listauthors,'match')));
    if isempty(iauthor), PPTx(i).author = ''; else, PPTx(i).author = listauthors{iauthor}; end
    PPTx(i).slidetitle = regexprep(PPTx(i).slidetitle,{'\s+(-|_)?\s*(Partner|Catherine|Maria|xxxx|Prof|Output|Special|part|WP2: Pro).*$' 'Fátima Poças\s?-?\s?' 'Output\:?\s*\d*\s*\(?O?\d*\)\s*' 'WP.*Unit \d\.\d\.?\s*','Common.*Unit\d\s\d\s*'},{'','','','',''});
end
dispf('found depths: %s',sprintf(' %d',unique([PPTx.depth])))
depthmax = max([PPTx.depth]);
valid = [PPTx.depth]==depthmax;
PPTx = PPTx(valid);
nPPTx = length(PPTx);

%% extract all levels, sort all
levels = cell(nPPTx,depthmax);
for i=1:nPPTx
    for j=1:depthmax
        levels{i,j} = PPTx(i).subpath_split{j};
    end
end
[~,ind] = sortrows(upper(levels));
levels = levels(ind,:);
PPTx = PPTx(ind);

%% classification
[levellist,levelid] = deal(cell(depthmax,1));
levelidx = NaN(nPPTx,depthmax);
for j = 1:depthmax
    [levellist{j},~,levelidx(:,j)] = unique(upper(levels(:,j)));
end
[~,~,classid] = unique(levelidx,'rows','stable');
listclassid = unique(classid); nclassid = length(classid);
partcounter = zeros(nclassid,1);
for i=1:nPPTx
    partcounter(classid(i)) = partcounter(classid(i)) + 1;
    PPTx(i).nparts = length(find(classid==classid(i)));
    PPTx(i).ipart = partcounter(classid(i));
end
levelid{1} = lower(uncell(regexp(levellist{1},'(COMMON|SPECIALIZED)','match')));
levelid{2} = regexprep(uncell(regexp(levellist{2},'(SESSION\s?\d+)','match')),'ESSION\s','');
levelid{3} = regexprep(uncell(regexp(levellist{3},'(UNIT\s?\d+\.\d+)','match')),'NIT\s','');
S = str2double(uncell(regexp(levellist{3},'UNIT\s?(?<section>\d+)\.(?<subsection>\d+)','tokens')));
titleid = repmat({''},size(levels));
titleid(:,1) = regexprep(levels(:,2),'session\s?\d+\s\_\s+','','ignorecase');
titleid(:,2) = regexprep(levels(:,3),'UNIT\s?\d+\.\d+\s*','','ignorecase');
% parts in file name not working
% tmp = uncell(regexp({PPTx.file}','part\s?(\d+)\.pptx$','tokens','ignorecase'));
% morethanone = ~cellfun(@isempty,tmp);
% titleid(morethanone,3) = arrayfun(@(n,m) sprintf('(part %d/%d)',n,m),str2double(uncell(tmp(morethanone))),[PPTx(morethanone).nparts]','UniformOutput',false);
% fixed parts
morethanone = [PPTx.nparts]'>1;
titleid(morethanone,3) = arrayfun(@(n,m) sprintf(' (part %d/%d)',n,m),[PPTx(morethanone).ipart]',[PPTx(morethanone).nparts]','UniformOutput',false);

%% prepare INPUTS
% Lectures are organized as level/section/unit
%         $sourcelocal: $INPUT1/ (path='$INPUT1/')
%                $pptx: $INPUT2 (char='$INPUT2')
%               $level: $INPUT3 (char='$INPUT3')
%             $section: $INPUT4 (char='$INPUT4')
%                $unit: $INPUT5 (char='$INPUT5')
%             $lecture: $INPUT6 (char='$INPUT6')
%        $runningTitle: $INPUT7 (char='$INPUT7')
%              $author: $INPUT8 (char='$INPUT8')
%   $ProductionComment: $INPUT9 (char='$INPUT9')
nINPUTS = 9;
template  = cell2struct(repmat({''},1,nINPUTS),arrayfun(@(i) sprintf('INPUT%d',i),1:nINPUTS,'UniformOutput',false),2);
for i=1:nPPTx
    PPTx(i).LEVEL = levelidx(i,1);
    PPTx(i).SECTION = S(levelidx(i,3),1);
    PPTx(i).SUBSECTION = S(levelidx(i,3),2);
    PPTx(i).PART = PPTx(i).ipart;
    PPTx(i).INPUTS = template;
    PPTx(i).INPUTS.INPUT1 = regexprep(PPTx(i).subpath,['^' regexptranslate('escape',filesep)],'');
    PPTx(i).INPUTS.INPUT2 = PPTx(i).file;
    PPTx(i).INPUTS.INPUT3 = levelid{1}{levelidx(i,1)};
    PPTx(i).INPUTS.INPUT4 = levelid{2}{levelidx(i,2)};
    PPTx(i).INPUTS.INPUT5 = levelid{3}{levelidx(i,3)};
    PPTx(i).INPUTS.INPUT6 = sprintf('part%d',PPTx(i).ipart);
    PPTx(i).INPUTS.INPUT7 = PPTx(i).slidetitle; %sprintf('%s%s',titleid{i,2},titleid{i,3});
    if isempty(PPTx(i).author)
        PPTx(i).INPUTS.INPUT8 = 'undefined author';
    else
        PPTx(i).INPUTS.INPUT8 = PPTx(i).author;
    end
    % check assignment the source PPTX, the image folder and its content
    def.set(PPTx(i).INPUTS) % assign all parameters
    % check
    if ~exist(fullfile(def.pptxfolder,def.pptx),'file')
        PPTx(i).INPUTS.INPUT7 = 'missing presentation';
        PPTx(i).INPUTS.INPUT9 = 'ERROR::missing PPTx';
        PPTx(i).ok = false;
    elseif ~exist(fullfile(def.pptxfolder,PPTx(i).name),'dir')
        PPTx(i).INPUTS.INPUT7 = 'missing images';
        PPTx(i).INPUTS.INPUT9 = 'ERROR::missing images'; % set an empty lecture
        PPTx(i).ok = false;
    elseif isempty(explore('*.PNG',fullfile(def.pptxfolder,PPTx(i).name),0,'fullabbreviate'))
        dispf('[%d/%d] no PNG, please check in ''%s''',i,nPPTx,def.pptxfolder)
        PPTx(i).ok = false;
    else
        PPTx(i).ok = true;
    end
    % create a hash folder to facilitate the conversion for all files having problems
    PPTx(i).hash = DataHash(fullfile(def.makehash),struct('HEX','base64','Method','MD2'));
    def.set('hash',PPTx(i).hash,'path');
    if ~PPTx(i).ok
        if ~exist(def.hashfolder,'dir'), mkdir(def.hashfolder), end
        if exist(fullfile(def.hashfolder,def.hash),'dir')
            dispf('[%d/%d] restore the folder images',i,nPPTx)
            if ~simulation
                if ~exist(fullfile(def.pptxfolder,PPTx(i).name),'dir'), mkdir(fullfile(def.pptxfolder,PPTx(i).name)), end
                copyfile(fullfile(def.hashfolder,def.hash,filesep),fullfile(def.pptxfolder,PPTx(i).name));
                delete(def.hashfile)
            end
        elseif ~exist(def.hashfile,'file')
            dispf('[%d/%d] put a hash.pptx to convert into images',i,nPPTx)
            if ~simulation
                copyfile(def.file2hash,def.hashfile); fileinfo(def.hashfile);
            end
        end
    else
        dispf('[%d/%d] pptx2reveal...',i,nPPTx)
        if ~simulation, pptx2reveal_v2(def.struct,'static','repair'), end
    end
end
struct2table([PPTx.INPUTS])

%% Generate main index
mdmain = cell(0,1);
firstupper = @(x) [upper(x(1)) lower(x(2:end))];
txt2html = @(x) regexprep(x,{' ','(',')'},{'%20','%28','%29'});
tmpwww = def.wwwhtml;
tmpwwwlib = def.wwwlib;
pathsplit = @(p) strsplit(regexprep(p,{['\' filesep '+'],['^\' filesep],['\' filesep '$']},{['\' filesep] '' ''}),filesep);
fullfilex = @(x) fullfile(x{:});
backpath = @(p) fullfilex(repmat({'..'},length(pathsplit(p)),1));
htmlpath = @(p) txt2html(fullfile('./',backpath(tmpwww),p));
htmllibpath = @(p) txt2html(fullfile(htmlpath(tmpwwwlib),p));
mdlink = @(text,htmlfile) sprintf('[%s](%s)',text,txt2html(fullfile('./',htmlfile)));

% levels
for level = unique([PPTx.LEVEL])
    ok1 = ([PPTx.LEVEL]==level);
    leveltitle = firstupper(regexprep(levellist{1}{level},{'^FITNESS\s_\s' '\straining modules'},{'' ''},'ignorecase'));
    mdmain{end+1} = sprintf('%s%s modules',def.ATXlevel,leveltitle); disp(mdmain{end})  %#ok<SAGROW>
    % section
    for section = unique([PPTx(ok1).SECTION])
        ok2 = ok1 & ([PPTx.SECTION]==section);
        sectiontitle = firstupper(regexprep(levellist{2}{section},'^SESSION\s?\d\s?[-_]?\s?',''));
        mdmain{end+1} = sprintf('%s %d. %s',def.ATXsection,section,sectiontitle); disp(mdmain{end})  %#ok<SAGROW>
        % subsection
        for subsection = unique([PPTx(ok2).SUBSECTION])
            ok3 = ok2 & ([PPTx.SUBSECTION]==subsection);
            if any(ok3)
                subsectiontitle = firstupper(regexprep(levellist{3}{subsection},'^UNIT\s?\d\.\d\s?',''));
                mdmain{end+1} = sprintf('%s %d.%d %s',def.ATXunit,section,subsection,subsectiontitle); disp(mdmain{end})  %#ok<SAGROW>
                % list parts
                listparts = unique([PPTx(ok3).PART]);
                for part = listparts
                    ok4 = ok3 & ([PPTx.PART]==part);
                    def.set(PPTx(ok4).INPUTS)
                    if part==1
                        if isempty(PPTx(ok4).author), author = 'undef'; else, author = PPTx(ok4).author; end
                        mdmain{end+1} = sprintf('%s %s',PPTx(ok4).slidetitle); disp(mdmain{end})  %#ok<SAGROW>
                        mdmain{end+1} = sprintf('*author: %s*',author); disp(mdmain{end})  %#ok<SAGROW>
                    end
                    mdmain{end+1} = [def.ATXlecture ' ' def.ATXrunnintitle ' ' mdlink(sprintf('part %d/%d',part,listparts(end)),def.link)]; disp(mdmain{end})  %#ok<SAGROW>
                    mdmain{end+1} = sprintf('%s',PPTx(ok4).slidetitle); disp(mdmain{end})  %#ok<SAGROW>
                end
            end
        end
    end
end

[r,s]=system('uname -a'); s=s(1:find(s==10,1)-1);
mdheader = {
    sprintf('![FITNESS](%s "ERASMUS+ Project")',htmllibpath(def.logo)) %'![FITNESS](./Fitness%20logo%20RVB.png "ERASMUS+ Project")'
    '# Online lectures'
    '[TOC]'
    };
mdfooter = {
    ''
    ''
    '------'
    ''
    ''
    '**ERASMUS + Project** - 2018-2020'
    sprintf('*Page generated automatically on %s with ''%s'' ( v. %0.3g, rev. %s )*',datestr(now),mfilename,vsn,rev)
    sprintf('* server: **%s@%s**  \nhost: *%s*',def.username,def.localname,s)
    sprintf('* local directory: %s',def.wwwroot)
    '* send any request to [Olivier Vitrac](mailto:olivier.vitrac@agroparistech.fr)'
    ''
    ''
    ''
    '------'
    ''
    ''
    'List of partners'
    ''
    '> - [ ] CROATIA (UZAB-PBF)'
    '> - [ ] FRANCE (ACTIA, AGROPARISTECH/INRA, AGROSUPDIJON)'
    '> - [ ] GERMANY (TUM)'
    '> - [ ] PORTUGAL (UCP)'
    '> - [ ] SPAIN (CSIC)'
    };

mdall = [mdheader;mdmain';mdfooter];

%%
dispf('FITNESS main file:')
mainmdfile = fullfile(def.wwwroot,def.indexfile);
if ~simulation
    logosource = fullfile(def.logosource,def.logo);
    logodestination = fullfile(def.wwwroot,def.wwwlib,def.logo);
    if ~exist(logodestination,'file')
        if ~exist(logosource,'file'), error('the source image ''%s'' does not exist',logosource), end
        copyfile(logosource,logodestination);
    end
    fid = fopen(mainmdfile,'w');
    for i=1:length(mdall), fprintf(fid,'%s  \n',mdall{i}); end
    fclose(fid);
    fileinfo(mainmdfile)
end


%% Alias configuration (Apache 2.4)
% <IfModule alias_module>
% 	# Aliases: Add here as many aliases as you need (with no limit). The format is
% 	# Alias fakename realname
% 	#
% 	# Note that if you include a trailing / on fakename then the server will
% 	# require it to be present in the URL.  So "/icons" isn't aliased in this
% 	# example, only "/icons/".  If the fakename is slash-terminated, then the
% 	# realname must also be slash terminated, and if the fakename omits the
% 	# trailing slash, the realname must also omit it.
% 	#
% 	# We include the /icons/ alias for FancyIndexed directory listings.  If
% 	# you do not use FancyIndexing, you may comment this out.
% 
% 	Alias /icons/ "/usr/share/apache2/icons/"
% 
% 	<Directory "/usr/share/apache2/icons">
% 		Options FollowSymlinks
% 		AllowOverride None
% 		Require all granted
% 	</Directory>
% 
% 	Alias /fitness/ "/home/olivi/Bulk/fitness2019/sandbox/www20190814/"
% 
% 	<Directory "/home/olivi/Bulk/fitness2019/sandbox/www20190814/">
% 		Options FollowSymlinks Indexes
% 		AllowOverride None
% 		Require all granted
% 	</Directory>
% 
% </IfModule>