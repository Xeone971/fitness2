function pptx2reveal_v2(varargin)
%PPTX2REVEAL converts PPTX into HTML 5 presentation based on the original PPTX and its exportation as high-resolution PNG images
%       pptx2reveal('property1','value1,'property2','value2,...)
%       pptx2reveal(...,'static')
%
%   Example:
%     /home/olivi/Documents/fitness/sandbox/matlab/sandbox/www
%     assets
%     `----css
%      |    `----highlight
%      |    `----print
%      |    `----theme
%      |     |    `----source
%      |     |    `----template
%     `----js
%     `----lib
%      |    `----css
%      |    `----font
%      |     |    `----league-gothic
%      |     |    `----source-sans-pro
%      |    `----js
%     `----plugin
%      |    `----highlight
%      |    `----markdown
%      |    `----math
%      |    `----multiplex
%      |    `----notes
%      |    `----notes-server
%      |    `----print-pdf
%      |    `----search
%      |    `----zoom-js
%     onlinepres
%     `----test
%      |    `----jpg
%{
      pptx2reveal_v2('pptx','TEST_Jac2017_source.pptx',...
                  'wwwroot','/home/olivi/Documents/fitness/sandbox/matlab/sandbox/www',...
                  'wwwrel','onlinepres/test/',...
                  'wwwlib','assets/',...
                  'pptxfolder','/home/olivi/Documents/fitness/sandbox/matlab/sandbox',...
                  'title','Sandbox developement - August 8, 2019  - not for production',...
                  'theme','night',...
                  'static',...
                  'repair' ...
                 )

%}
% 20/09/2018 - INRA\Olivier Vitrac - rev 18/08/2019

% Revision history
% 20/09/2018 alpha/primitive script (first demo online)
% 22/09/2018 entering in beta version, function, documentation and examples (most of reveal options are implemented)
% 23/09/2018 clean trailing characters ',', ';', ...
% 09/12/2018 add keyword simulation
% 08/08/2019 fork of ppt2reveal, moving to version 0.2 (version 2)
% 09/08/2019 add contentnfo
% 10/08/2019 add fontsize
% 18/08/2019 several fies for production (2.1)

%% Definitions
vrsn = 0.21;
launchpath = pwd;
cleanupObj = onCleanup(@()cd(launchpath));
switch localname
    case {'LX-Olivier2018' 'mol12.agroparistech.fr'}
        local = '/home/olivi/Documents/fitness/sandbox';
    otherwise
        error('define your machine, first')
end
revealoptions_default = struct( ... see https://github.com/hakimel/reveal.js#slide-attributes
    'transition','convex',... none/fade/slide/convex/concave/zoom
    'backgroundTransition','fade',...
    'viewDistance',5,...
    'center',false,...
    'overview',true,...
    'touch',true,...
    'progress',true,...
    'controls',true,...
    'controlsTutorial',true,...
    'controlsLayout','bottom-right',...
    'help',true,...
    'mouseWheel',true,...
    'slideNumber', 'c/t',...
    'autoSlide',15000,...
    'width',"102%",...
	'height',"102%",...
	'margin',0,...
	'minScale',0.1,...
	'maxScale',2,...
    'display','block',...
    'transitionSpeed','default' ... default/fast/slow
    );
imsourcefolder_default = 'png';
default = struct(...
    'wwwroot',local,...
    'wwwrel','demo',...
    'wwwlib','src',...
    'pptxfolder',local,...
    'pptx','Cours_migration2018.pptx',... source pptx required
    'imfolder','jpg',...
    'imsourcefolder','',...
    'impat','Slide*.jpg',...assets
    'author','INRA\\Olivier Vitrac',...
    'contact','olivier.vitrac@agroparistech.fr',...
    'YAMLtitle','',... title will be used when empty
    'title','CONTAMINATION OF FOOD BY PACKAGING MATERIALS',...
    'vrsn',vrsn,...
    'mdfile','index.md',...
    'projectname','',...
    'theme','moon',... % beige,blcak,blood,league,moon,night,serif,simple,sky,solarized,white (https://github.com/hakimel/reveal.js/tree/master/css/theme)
    'initialscale',0.8,...
    'maximumscale',2.0,...
    'userscalable','yes',...
    'reveal',revealoptions_default,...
    'headingshift','',... add '##' to convert h1->h3, h2->h4, h3->h5, etc.
    'fontsize',[0.6000 0.5500 0.4500 0.3500 0.3000]+.1,... h1 h2 h3, etc. in em (to be used in css/theme/theme.css)
    'hash','',...
    'traceability',true);
boolean = {'false','true'};
keyword = {'static','simulation' 'repair'};
staticobjects = {
    'css' 'js'   'lib' 'plugin' 'index.html'
    'dir' 'dir'  'dir' 'dir'    'file'
}; % content of the static objects

%% arg check
[revealoptions,others] = argcheck(varargin,struct('reveal',revealoptions_default),keyword,'keep','case','nostructexpand');
o = argcheck(others,rmfield(default,'reveal'),'','case');
o.static = revealoptions.static;
o.simulation = revealoptions.simulation;
o.repair = revealoptions.repair;
revealoptions = argcheck(revealoptions.reveal,revealoptions_default,'','case');
if isempty(o.projectname), [~,projectname] = fileparts(o.mdfile); else, projectname = o.projectname; end
if isempty(o.YAMLtitle), o.YAMLtitle = o.title; end 
outputhml = [projectname '.html'];
staticobjects(:,end+1) = {outputhml,'file'};

%% folder check
% wwwroot = server root
% www = /wwwroot/.../wwwrel/ = location of index.html
% wwwlib = /wwwroot/.../o.wwwlib/ = location of libraries
if ~exist(o.wwwroot,'dir'), error('the wwwroot folder ''%s'' does not exist',o.wwwroot), end
if ~exist(o.pptxfolder,'dir'), error('the pptx folder ''%s'' does not exist',o.pptxfolder), end
if ~exist(fullfile(o.pptxfolder,o.pptx),'file'), error('the PPTX file ''%s'' does not exist in ''%s''',o.pptx,o.pptxfolder), end
www = fullfile(o.wwwroot,o.wwwrel);  % location of index.html
wwwlib = fullfile(o.wwwroot,o.wwwlib);
if ~exist(www,'dir'), mkdir(www), end
if ~exist(wwwlib,'dir'), mkdir(wwwlib), end
% htmlpath(p) make p relative to root
% -- example --
% tmpwww = 'www/folder1/html'
% tmpwwwlib = 'lib'
% htmloldlibpath('js') -> './js'
% htmllibpath('js') ->  './../../../lib/js'
% -------------
tmpwww = o.wwwrel;
tmpwwwlib = o.wwwlib;
pathsplit = @(p) strsplit(regexprep(p,{['\' filesep '+'],['^\' filesep],['\' filesep '$']},{['\' filesep] '' ''}),filesep);
fullfilex = @(x) fullfile(x{:});
backpath = @(p) fullfilex(repmat({'..'},length(pathsplit(p)),1));
htmlpath = @(p) fullfile('./',backpath(tmpwww),p);
htmloldlibpath = @(p) fullfile('./',fullfilex(pathsplit(p)));
htmllibpath = @(p) fullfile(htmlpath(tmpwwwlib),p);

%% engines
imenginecmd = sprintf('mogrify -path ''%s'' -resize 25x25%% -quality 90 -format jpg *.PNG',fullfile(www,o.imfolder));
imengine = @() system(imenginecmd);

% old text extraction (depreciated in version 0.2, use extractTXTfromPPT instead)
% textenginecmd = @(i) sprintf('unzip -qc ''%s'' ppt/slides/slide%d.xml | grep -oP ''(?<=\\<a:t\\>).*?(?=\\</a:t\\>)''',fullfile(o.pptxfolder,o.pptx),i);
% textengine = @(i) system(textenginecmd(i));
% slide = @(i) getOutput(textengine,2,i);

%% static output
% location:: www = /wwwroot/.../wwwrel/
[relpptxfolder,fnpptx] = fileparts(o.pptx);
if isempty(o.projectname)
    staticsite = sprintf('_html_%s',fnpptx);
else
    staticsite = sprintf('_html_%s',o.projectname);    
end
staticfolder = fullfile(www,staticsite);
existstaticfolder = exist(staticfolder,'dir');

%% search for thumb images
% location:: www = /wwwroot/.../wwwrel/imfolder/
if ~exist(fullfile(www,o.imfolder),'dir')
    dispf('PPTX2REVEAL: the image folder ''%s'' does not exist in ''%s''',o.imfolder,o.wwwroot)
    if isempty(o.imsourcefolder)
        if exist(fullfile(o.pptxfolder,relpptxfolder,fnpptx),'dir')
            rootimsourcefolder = fullfile(o.pptxfolder,relpptxfolder);
            o.imsourcefolder = fnpptx;
        else
            rootimsourcefolder = o.wwwroot;
            o.imsourcefolder = imsourcefolder_default;
        end
    else
            rootimsourcefolder = o.wwwroot;        
    end
    if exist(fullfile(rootimsourcefolder,o.imsourcefolder),'dir')
        dispf('PPTX2REVEAL: conversion of all images from the folder ''%s''',o.imsourcefolder)
        if o.simulation,    dispf('simulation>> mkdir %s',fullfile(www,o.imfolder))
        else,               mkdir(fullfile(www,o.imfolder))
        end
        cd(fullfile(rootimsourcefolder,o.imsourcefolder))
        if o.simulation,    dispf('simulation>> cd ''%s''\nsimulation>> %s',fullfile(rootimsourcefolder,o.imsourcefolder),imenginecmd)
        else,               dispf('run>> %s',imenginecmd), imengine();
        end
        cd(launchpath)
    else
        error('the image source folder ''%s'' does not exist in ''%s''',o.imsourcefolder,rootimsourcefolder)
    end
end
f = explore(o.impat,fullfile(www,o.imfolder),[],'abbreviate');
if isempty(f)
    if o.simulation
        dispf('simulation>> ERROR no files ''%s'' found in ''%s''',o.impat,fullfile(www,o.imfolder))
        f = explore('*.PNG',fullfile(rootimsourcefolder,o.imsourcefolder),[],'abbreviate');
        if isempty(f)
            error('SIMULATION failed: no jpg or png files, please export slides first')
        end
    else
        error('no files ''%s'' found in ''%s''',o.impat,fullfile(www,o.imfolder))
    end
end
nn = str2double(uncell(regexp({f.name},'(\d+$)','tokens')));
[~,ind] = sort(nn);
f = f(ind); n = length(f);
dispf('PPTX2REVEAL: %d slide images found',n)

%% read the PPT file or use its PREFETCH_ if any (version 0.2 - only)
generatorid = mfilename;
myppt = extractTXTfromPPT(...
    fullfile(o.pptxfolder,o.pptx),...
    'id',generatorid,...
    'prefetchprefix',sprintf('PREFETCHPPTx_%s_',generatorid),...
    'headingshift',o.headingshift);
if length(myppt)~=n
    error('PPTX2REVEAL: the number of static images (%d) does not match the number of slides (%d)',n,length(myppt))
end

%% generate the MarkDown File
slidetransition = '<!--s-->'; %'\n---\n'; % Slides left-right and up-down navigation with ‘—‘ or ‘—-‘
verticalbar = '<!--v-->';
if o.simulation
    dispf('simulation>> touch %s',fullfile(o.wwwroot,o.mdfile))
    disp([repmat('-',1,80) '<<< begin'])
    fid = 1;
else
    if ~exist(fullfile(www,o.mdfile),'file') || o.repair
        fid = fopen(fullfile(www,o.mdfile),'w');
    else
        dispf('\t * * *    I M P O R T A N T    * * *')
        dispf('PPTX2REVEAL: the output file exist, use ''repair'' to regenerate the MarkDown file')
        dispf('PPTX2REVEAL: simulation mode is activated')
        fid = 1;
        o.simulation = true;
    end
end
fprintf(fid,'---\n');
fprintf(fid,'title: ''%s''\n',o.YAMLtitle);
fprintf(fid,'separator: %s\n',slidetransition);
fprintf(fid,'verticalSeparator: %s\n',verticalbar);
fprintf(fid,'theme: %s\n',o.theme);
fprintf(fid,'revealOptions:\n');
for p=fieldnames(revealoptions)'
    if ~isempty(revealoptions.(p{1}))
        if isnumeric(revealoptions.(p{1}))
            fprintf(fid,'    %s: %d\n',p{1},revealoptions.(p{1}));
        elseif islogical(revealoptions.(p{1}))
            fprintf(fid,'    %s: %s\n',p{1},boolean{1+revealoptions.(p{1})});
        else
            fprintf(fid,'    %s: ''%s''\n',p{1},revealoptions.(p{1}));
        end
    end
end
fprintf(fid,'---\n');
fprintf(fid,'___\n');
fprintf(fid,'## %s\n',o.title);
fprintf(fid,'### %s\n',o.author);
fprintf(fid,'___\n');
fprintf(fid,'    version: production (%0.3g)\n',o.vrsn);
fprintf(fid,'    date: %s\n',datestr(now,'mmmm dd, yyyy'));
fprintf(fid,'    content: %d slides\n',n);
fprintf(fid,'    class: %s\n',o.YAMLtitle);
fprintf(fid,'    title: %s\n',o.title);
fprintf(fid,'    source: %s\n',o.pptx);
fprintf(fid,'    hash: %s\n',o.hash);
fprintf(fid,'    contact: %s\n',o.contact);
fprintf(fid,'note: ##### [%s]%s@%s> %s with the following parameters: \n',datestr(now,'HH:MM:SS - dd/mm/yyyy'),username,localname,mfilename);
fprintf(fid,' |   **parameter**  | **value**  |\n');
fprintf(fid,' | --------------: | -------- |\n');
for fo = fieldnames(o)'
    if ischar(o.(fo{1})), fprintf(fid, '|   `%s`:   |   ` %s`   |\n',fo{1},o.(fo{1}));
    elseif isnumeric(o.(fo{1})), fprintf(fid,' | `%s`: |   ` %0.4g`   |\n',fo{1},o.(fo{1})(1)); end
end
fprintf(fid,slidetransition);
screen = '';
for i=1:n
    screen = dispb(screen,'>> writting slide %d of %d',i,n);
    content = myppt(i).content; %slide(i);
    fprintf(fid,'\n%s\n',myppt(i).title);
    fprintf(fid,'![%s](./%s/%s  "slide %d of %d") \n',f(i).file,o.imfolder,f(i).file,i,n);
    noteon = false; if ~isempty(content), fprintf(fid,'note: %s',content); noteon = true; end
    if o.traceability, if noteon, fprintf(fid,'%s\n',myppt(i).contentnfo); else, fprintf(fid,'note: %s\n',myppt(i).contentnfo); end, end
    fprintf(fid,slidetransition);
end
if o.simulation,         disp([repmat('-',1,80) '<<< end'])
else,                    fclose(fid);
end

%% display
currentpath = pwd;
if o.static
    cd(www)
    revealcmd = sprintf('reveal-md %s --static ''%s''',o.mdfile,staticsite);
    if o.simulation
        dispf('simulation>> %s',revealcmd)
    else
        outputhtml_default = fullfile(staticfolder,'index.html'); % original file created by reveal-md
        outputhtml = fullfile(staticfolder,outputhml);
        if o.repair % cleaning
            % clean assets
            if existstaticfolder, dispf('clean>> %s',staticfolder), rmdir(staticfolder,'s'), end
            for sobj = staticobjects
                    if exist(fullfile(staticfolder,sobj{1}),sobj{2})
                        dispf('clean>> %s',fullfile(staticfolder,sobj{1}))
                        if strcmp(sobj{2},'dir'), rmdir(fullfile(staticfolder,sobj{1}),'s')
                        else,                     delete(fullfile(staticfolder,sobj{1}))
                        end % dir, file
                    end % if exist
            end % next sobj
            % clean mdfile.html
            if exist(outputhtml_default,'file'), delete(outputhtml_default); end
            if exist(outputhtml,'file'), delete(outputhtml); end
        end % if repair
        % WORKAROUND
        %  _html_TEST_Jac2017_source/index.html
        %  _html_TEST_Jac2017_source/index.html → _html_TEST_Jac2017_source/index.html
        % { [Error: EEXIST: file already exists, symlink 'index.html' -> '_html_TEST_Jac2017_source/index.html']
        % Note that --static-dirs='jpg/' does not resolve the warnings
        if ~exist(outputhtml,'file')
            if ~exist(staticfolder,'dir'), mkdir(staticfolder); end
            system(sprintf('touch ''%s''',outputhtml));
        end % workaround to fix a bug in reveal-md 
        % END WORKAROUND
        LD_LIBRARY_PATH = getenv('LD_LIBRARY_PATH');    % save library path
        setenv('LD_LIBRARY_PATH','')                    % clear library path
        dispf('run>> %s',revealcmd), system(revealcmd); % run with the system libraries (running this command on existing files without repair generate an error)
        setenv('LD_LIBRARY_PATH',LD_LIBRARY_PATH)       % restore the library path
        if ~exist(staticfolder,'dir'), error('the following command fails: %s',revealcmd), end
    end % simulation
    if o.simulation
        dispf('simulation>> update %s',outputhtml)
    else
        % edit index.html (or the equivalent outputhtml)
        if exist(outputhtml_default,'file')
            fid = fopen(outputhtml_default,'r'); raw=uncell(textscan(fid,'%s','delimiter','\n','whitespace','')); fclose(fid);
        else
            fid = fopen(outputhtml,'r'); raw=uncell(textscan(fid,'%s','delimiter','\n','whitespace','')); fclose(fid);
        end
        % change all paths
        for p = staticobjects(1,ismember(staticobjects(2,:),'dir'))
            oldp = htmloldlibpath(p{1});
            newp = htmllibpath(p{1});
            raw = regexprep(raw,regexptranslate('escape',oldp),regexptranslate('escape',newp));
        end
        % viewport
        iviewport = ~cellfun(@isempty,regexp(raw,'<meta name="viewport".*>'));
        raw{iviewport} = sprintf('<meta name="viewport" content="width=device-width, initial-scale=%0.1f, maximum-scale=%0.1f, user-scalable=%s">',...
            o.initialscale,o.maximumscale,o.userscalable);
        % write back index.html (or the equivalent outputhtml)
        fid = fopen(outputhtml,'w'); for i=1:length(raw); fprintf(fid,'%s\n',raw{i}); end, fclose(fid);
        % move content (only if repair, if not do it manually)
        skip = false;
        if o.repair
            for sobj = staticobjects
                if exist(fullfile(staticfolder,sobj{1}),sobj{2})
                    dispf('move>> %s',fullfile(staticfolder,sobj{1}))
                    if strcmp(sobj{2},'dir')
                        if exist(fullfile(wwwlib,sobj{1}),'dir')
                            dispf('skip ''%s'', the directory exist already in ''%s''',fullfile(sobj{1},filesep),wwwlib)
                            skip = true;
                        else
                            movefile(fullfile(staticfolder,sobj{1}),fullfile(wwwlib,sobj{1}))
                        end
                    else
                        movefile(fullfile(staticfolder,sobj{1}),fullfile(www,sobj{1}))
                    end
                end % if exist
            end % next sobj
            dispf('delete>> %s',staticfolder), if skip, rmdir(staticfolder,'s'); else, rmdir(staticfolder); end
            if  ~strcmp(outputhtml_default,outputhtml) && exist(fullfile(www,lastdir(outputhtml_default)),'file'), delete(fullfile(www,lastdir(outputhtml_default))); end
        end % if repair
        % fix fontsize in css
        cssfile = fullfile(wwwlib,'css','theme',sprintf('%s.css',o.theme)); cssupdate = false;
        fid = fopen(cssfile,'r'); raw=uncell(textscan(fid,'%s','delimiter','\n','whitespace','')); fclose(fid);
        for ih = 1:length(o.fontsize)
            icss = find(ismember(raw,sprintf('.reveal h%d {',ih)),1,'first');
            if ~isempty(icss) && icss<length(raw)
                raw{icss+1} = regexprep(raw{icss+1},'\d?\.?\d+em',sprintf('%0.3gem',o.fontsize(ih)));
                cssupdate = true;
            end
        end % next ih
        if cssupdate, fid = fopen(cssfile,'w'); for i=1:length(raw); fprintf(fid,'%s\n',raw{i}); end, fclose(fid); end
    end % simulation
    cd(currentpath)
else
    cd(o.www)
    dispf('\nOnline demo open in the default browser')
    revealcmd = sprintf('reveal-md %s',o.mdfile);
    if o.simulation,    dispf('simulation>> %s',revealcmd)   
    else,               dispf('run>> %s',revealcmd), system(revealcmd);
    end
end


end % end function

% ===================================== PRIVATE FUNCTIONS =====================================
% function varargout = getOutput(func,outputNo,varargin)
%     varargout = cell(max(outputNo),1);
%     [varargout{:}] = func(varargin{:});
%     varargout = varargout(outputNo);
% end

%% __NOTES__
% Image resize
%   mogrify -path /home/olivi/Documents/sandbox/migration/jpg -resize 25x25% -quality 90 -format jpg *.PNG
% Text extraction
%   unzip -qc Cours_migration2018.pptx ppt/slides/slide1.xml | grep -oP '(?<=\<a:t\>).*?(?=\</a:t\>)'
%   unzip Cours_migration2018.pptx 'ppt/slides/*.xml' -d .  
% HMTL5 conversion
% reveal-md migration.md --static
% reveal-md slides.md --static _site
